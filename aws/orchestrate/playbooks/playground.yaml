#------------------------------------------------------------------------------------------------------------
# A playbook for playing around.
#------------------------------------------------------------------------------------------------------------

---

- name: Debug
  hosts: all
  tasks:
    - name: P1.3 - Copy the remote data scripts
      copy:
        src: ./remote_data_scripts/
        dest: "{{ all_GROUP_home_dir }}"
        mode: "0777"

#- name: Fetches the results to controller
#  hosts: processors
#  any_errors_fatal: true
#  tasks:
#
#    - name: Fetching metrics data
#      synchronize:
#        src: "{{ _archive_file }}"
#        dest: "{{ _destination_on_controller }}"
#        mode: pull
#      vars:
#        _archive_file: "{{ processors_GROUP_project_metrics_path }}/{{ test_group }}/sync.tar.gz"
#        _destination_on_controller: "{{ lookup('env','COLLECTED_METRICS_PATH') | mandatory }}/{{ test_group }}/"
#
#    - name: Extracting metrics data on controller
#      delegate_to: 127.0.0.1
#      shell:
#        cmd: |
#          tar -xvzf {{ _archive_name }} --strip-components=1
#        chdir: "{{ lookup('env','COLLECTED_METRICS_PATH') | mandatory }}/{{ test_group }}/"
#      vars:
#        _archive_name: "sync.tar.gz"

#- name: Debug
#  hosts: clients
#  tasks:
#    - name: P2.3.5 - Copy workloads
#      copy:
#        src: ./workloads/
#        dest: '{{ clients_GROUP_workloads_dir }}'
#    - name: P1.3 - Copy the remote data scripts
#      copy:
#        src: ./remote_data_scripts/
#        dest: "{{ all_GROUP_home_dir }}"
#        mode: "0777"

#- name: Send test
#  hosts: clients
#  tasks:
#    - shell:
#        cmd: |
#          bash -ilc 'scp -oStrictHostKeyChecking=no ~/util.R {{ workers_GROUP_processor_destination }}:~/test/util.R.bak'

#- name: Debug
#  hosts: all
#  tasks:
#    - debug:
#        msg: "{{ workers_GROUP_processor_destination }}"

#- ansible.builtin.import_playbook: util_start_clients.yaml
#  vars:
#    workload: |
#      threadcount=5
#      other stuff

#- ansible.builtin.import_playbook: util_inject_fault.yaml
#  vars:
#    condition: 'disconnect leader'
#    delay_sec: 5
#    duration_sec: 30
#
#- name: Fault injection results1
#  hosts: nodes
#  tasks:
#    - name: Fault injection results
#      async_status:
#        jid: "{{ inject_fault_task.ansible_job_id }}"
#      register: job_result
#      until: job_result.finished
#      retries: 1000
#      delay: 10

#- name: Test play
#  hosts: clients
##  roles:
##    - nodes
#  tasks:
#    - debug:
#        msg: "{{ test_params }}"
#      vars:
#        test_params: |
#          recordcount=1000
#          operationcount=1000
#          workload=site.ycsb.workloads.CoreWorkload
#
#          readallfields=true
#
#          readproportion=0.5
#          updateproportion=0.5
#          scanproportion=0
#          insertproportion=0
#
#          requestdistribution=zipfian



#- name: Test play
#  hosts: nodes
#  roles:
#    - nodes

#  tasks:
#    - name: Shell test
#      vars:
#        cli_params: "hello there"
#      shell:
#        cmd: |
#          bash -ilc 'echo {{ inventory_hostname }}'
#          bash -ilc 'java \
#                      -Dlog4j.configuration=file:{{ workers_GROUP_project_log_config_file}} \
#                      -cp "lib/*:*" \
#                      com.mboysan.consensus.KVStoreClientCLI {{ cli_params }}'
#        chdir: "{{ nodes_GROUP_working_dir }}"
#      when: "inventory_hostname not in groups['stores']"
#      register: result

#- name: Test play
#  hosts: nodes
#  vars:
#    nodeName: "{{ inventory_hostname }}"
#    nodeId: "{{ inventory_hostname | regex_search('[0-9]')}}"
#  tasks:
#    - name: Shell test
#      shell:
#        cmd: |
#          bash -ilc 'java \
#                      -Dlog4j.configuration=file:{{ workers_GROUP_project_log_config_file}} \
#                      -cp "lib/*:*" \
#                      com.mboysan.consensus.KVStoreClientCLI'
#        chdir: "{{ nodes_GROUP_working_dir }}"
#      when: "inventory_hostname not in groups['stores']"
#      register: result

#- name: P2.1 - Gather private ip-s of nodes
#  # uses ~/.aws/credentials to make api calls
#  hosts: localhost
#  connection: local
#  tasks:
#    - name: Gather EC2 remote facts.
#      ec2_instance_info:
#        profile: ansible
#        region: "{{ all_GROUP_aws_region }}"
#        filters:
#          tag:Group : 'nodes'
#      register: res_ec2_info
#    - name: Debug facts
#      debug:
#        msg: "{{ res_ec2_info | json_query('instances[*].network_interfaces[*].private_ip_address') | join(', ') }} "
#
#    - name: debug3
#      debug:
#        msg: "{{ item.tags.Name }}:{{ item.private_ip_address }}"
#      loop: "{{ res_ec2_info.instances }}"
#
#    - name: debug4
#      debug:
#        var: {{ item.tags.Name }}:{{ item.private_ip_address }}
#      loop: "{{ res_ec2_info.instances }}"
