#------------------------------------------------------------------------------------------------------------
# Playbook that starts an etcd cluster and performs load tests on it with the provided params.
# It then sends client (YCSB) metrics to processors and cleans up the workers.
#------------------------------------------------------------------------------------------------------------

---
# ------------------------------------------------------------------------------------ Runtime configuration
- import_playbook: util_runtime_config.yaml

# ------------------------------------------------------------------------------------ Load test
- name: Starts all Consul KV stores
  hosts: nodes
  tasks:
    - name: Delete config dir
      file:
        path: '{{ nodes_GROUP_consul_config_dir }}'
        state: absent

    - name: Prepare consul configuration script
      template:
        src: consul_config.template.sh
        dest: "{{ all_GROUP_home_dir }}/consul_config.sh"
        mode: "+x"
      vars:
        nodeId: "{{ nodes_GROUP_current_node_id }}"
        expected_number_of_nodes: "{{ groups['nodes'] | length }}"
        consulPortGrpc: "{{ lookup('env','RESERVED_PORT_START') | int | mandatory + 2 }}"
        consulPortServer: "{{ lookup('env','RESERVED_PORT_START') | int | mandatory + 3 }}"
        consulPortSerfLan: "{{ lookup('env','NODE_SERVING_PORT') | int | mandatory }}"
        consulPortHttp: "{{ lookup('env','CLIENT_SERVING_PORT') | int | mandatory }}"
        node_destinations_json_array: "{{ workers_GROUP_consul_node_destinations | to_json }}"

    - name: Execute consul configuration
      shell:
        cmd: |
          bash -ilc './consul_config.sh'
        chdir: "{{ all_GROUP_home_dir }}"

    - name: Starting all consul KV stores (async)
      shell:
        cmd: |
          set -m
          
          # run in background
          bash -ilc './consul agent -config-dir={{ _config_dir }} -log-file={{ _consul_logs }}' &
          
          bash -ilc 'sleep 1m'
        chdir: "{{ nodes_GROUP_consul_working_dir }}"
      vars:
        _config_dir: "{{ nodes_GROUP_consul_config_dir }}/node{{ nodes_GROUP_current_node_id }}"
        _consul_logs: "{{ workers_GROUP_project_log_file }}"
      async: 100
      poll: 0
      register: start_stores_task

    - name: Waiting stores to start
      async_status:
        jid: "{{ start_stores_task.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 100
      delay: 10


- name: Fault injection (if defined)
  hosts: nodes
  tasks:
    - name: Prepare inject_fault script
      template:
        src: inject_fault_etcd_consul.template.sh
        dest: "{{ _home_dir }}/inject_fault_etcd_consul.sh"
        mode: "+x"
      vars:
        _server_name: "{{ inventory_hostname }}"
        _home_dir: "{{ all_GROUP_home_dir }}"
      when: inject_fault is defined

    - name: Running inject_fault script
      shell:
        cmd: |
          bash -ilc './inject_fault_etcd_consul.sh'
        chdir: "{{ all_GROUP_home_dir }}"
      async: "{{ duration_sec * 2 | default(500) }}"
      poll: 0
      register: inject_fault_task
      when: inject_fault is defined
  vars:
    delay_sec: "{{ inject_fault['delay_sec'] }}"
    duration_sec: "{{ inject_fault['duration_sec'] }}"

- name: Starts client(s)
  hosts: clients
  tasks:
    - name: Starting client(s) (perf test)
      shell:
        cmd: |
          set -m
          
          workload="{{ workload }}"
          workloadFile="{{ clients_GROUP_workloads_dir }}/{{ workload }}"
          if [ ! -f "$workloadFile" ]; then
            echo "received custom workload:"
            echo "$workload"
            echo "$workload" > "{{ clients_GROUP_workloads_dir }}/workload_file"
          else
            cp "$workloadFile" "{{ clients_GROUP_workloads_dir }}/workload_file"
          fi
          
          bash -ilc 'export JAVA_OPTS="-Dlog4j.configuration=file:{{ workers_GROUP_project_log_config_file}}" && \
                      ./bin/ycsb.sh run consul {{ _metrics_params }} {{ _client_params }} -P {{ clients_GROUP_workloads_dir }}/workload_file'
        chdir: "{{ clients_GROUP_working_dir }}"
      vars:
        _metrics_params: >-
          -p measurementtype=raw
          -p measurement.raw.output_file={{ workers_GROUP_project_metrics_file }}
          -p measurement.raw.graphite=true
          -p measurement.raw.separator=,
          -p exportfile={{ workers_GROUP_project_metrics_file }}
        _client_params: >-
          -p cluster.members={{ workers_GROUP_consul_store_destinations }}

- name: Checks fault injection results
  hosts: nodes
  tasks:
    - name: Checking fault injection results
      async_status:
        jid: "{{ inject_fault_task.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 1000
      delay: 10
      when: inject_fault is defined

    - name: Print fault injection result
      debug:
        msg: "{{ job_result.stdout }}"
        verbosity: 1
      when: inject_fault is defined

# ------------------------------------------------------------------------------------ Metrics collection and cleanup

- import_playbook: util_stop_workers.yaml

- import_playbook: util_send_metrics.yaml
  vars:
    consensus_protocol: "consul_raft"
    analyze_store_jvm_metrics: false
    analyze_store_message_metrics: false

- import_playbook: util_cleanup_workers.yaml