#------------------------------------------------------------------------------------------------------------
# Playbook that starts an etcd cluster and performs load tests on it with the provided params.
# It then sends client (YCSB) metrics to processors and cleans up the workers.
#------------------------------------------------------------------------------------------------------------

---
- import_playbook: util_runtime_config.yaml

# ------- nodes
- import_playbook: util_start_etcd_nodes.yaml
  when: cluster_type == "etcd"

- import_playbook: util_start_consul_nodes.yaml
  when: cluster_type == "consul"

# ------- init fault injection

- name: Fault injection (if defined)
  hosts: nodes
  tasks:
    - name: Prepare inject_fault script
      template:
        src: inject_fault_etcd_consul.template.sh
        dest: "{{ _home_dir }}/inject_fault_etcd_consul.sh"
        mode: "+x"
      vars:
        _server_name: "{{ inventory_hostname }}"
        _home_dir: "{{ all_GROUP_home_dir }}"
      when: inject_fault is defined

    - name: Running inject_fault script
      shell:
        cmd: |
          bash -ilc './inject_fault_etcd_consul.sh'
        chdir: "{{ all_GROUP_home_dir }}"
      async: "{{ duration_sec * 2 | default(500) }}"
      poll: 0
      register: inject_fault_task
      when: inject_fault is defined
  vars:
    delay_sec: "{{ inject_fault['delay_sec'] }}"
    duration_sec: "{{ inject_fault['duration_sec'] }}"

# ------- clients
- import_playbook: util_start_etcd_clients.yaml
  when: cluster_type == "etcd"

- import_playbook: util_start_consul_clients.yaml
  when: cluster_type == "consul"

# ------- check fault injection

- name: Checks fault injection results
  hosts: nodes
  tasks:
    - name: Checking fault injection results
      async_status:
        jid: "{{ inject_fault_task.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 1000
      delay: 10
      when: inject_fault is defined

    - name: Print fault injection result
      debug:
        msg: "{{ job_result.stdout }}"
        verbosity: 1
      when: inject_fault is defined

# ------- metrics collection and cleanup

- import_playbook: util_stop_workers.yaml

- import_playbook: util_send_metrics.yaml
  vars:
    analyze_store_jvm_metrics: false
    analyze_store_message_metrics: false

- import_playbook: util_cleanup_workers.yaml