#------------------------------------------------------------------------------------------------------------
# Playbook to inject network faults in the system.
# This playbook depends on all KV stores to be started first.
#------------------------------------------------------------------------------------------------------------

---
- name: Fault injection
  hosts: nodes
  tasks:
    - name: Injecting network fault (async)
      shell:
        cmd: |
          set -m
          
          SERVER_NAME="{{ _server_name }}"
          echo "on server -> $SERVER_NAME"
          
          NODE_ID=$(echo $SERVER_NAME | tr -dc '0-9')
          echo "node id=$NODE_ID"
          
          CONDITION="{{ _condition }}"
          echo "condition -> $CONDITION"
          
          PORT="{{ nodes_GROUP_node_serving_port }}"
          DELAY_SEC="{{ delay_sec | default(0) }}"
          DURATION_SEC="{{ duration_sec | default(0) }}"
          
          CURR_DIR=$(pwd)
          NETWORK_SCRIPT_DIR="{{ _home_dir }}"
          
          disconnect() {
            echo "I am being disconnected..."
          
            # cleanup tmp files
            rm *.tmp
          
            # manipulate network firewall
            cd $NETWORK_SCRIPT_DIR
            ./network_partition.sh disconnect --port "$PORT" --delay "$DELAY_SEC" --duration "$DURATION_SEC"
            cd $CURR_DIR
          }
          
          amILeader() {
            echo "$NODE_ID#askState" > command.tmp
            bash -ilc 'java \
                        -cp *.jar \
                        com.mboysan.consensus.KVStoreClientCLI {{ _mandatory_params }} command=$(cat command.tmp)' > my_node_state.tmp
            echo "askState -> received: "
            cat my_node_state.tmp
          
            nodeIsLeader=$(grep -c "LEADER" my_node_state.tmp)
            if [ $nodeIsLeader -ge 1 ]; then
              return 0
            fi
            return 1
          }
          
          amIFollowerToDisconnect() {
            bash -ilc 'java \
                        -cp *.jar \
                        com.mboysan.consensus.KVStoreClientCLI {{ _mandatory_params }} command=0#askState' > node0_state.tmp
            echo "0#askState -> received: "
            cat node0_state.tmp
          
            node0Follower=$(grep -c "FOLLOWER" node0_state.tmp)
            if [ $node0Follower -ge 1 ]; then
              if [ "$SERVER_NAME" = "node0" ]; then
                return 0
              fi
            elif [ "$SERVER_NAME" = "node1" ]; then
              # node-0 is the leader, so return node-1
              return 0
            fi
            return 1
          }
          
          bash -ilc 'java \
                      -cp *.jar \
                      com.mboysan.consensus.KVStoreClientCLI {{ _mandatory_params }} command=askProtocol' > protocol.tmp
          echo "askProtocol -> received: "
          cat protocol.tmp
          RAFT=$(grep -c "raft" protocol.tmp)
          BIZUR=$(grep -c "bizur" protocol.tmp)
          
          if [ $RAFT -ge 1 ]; then
            echo "protocol is raft"
              
            if [ "$CONDITION" = "disconnect leader" ]; then
              if amILeader; then
                disconnect
                exit 0
              fi
            elif [ "$CONDITION" = "disconnect follower" ]; then
              if amIFollowerToDisconnect; then
                disconnect
                exit 0
              fi
            fi
          
          elif [ $BIZUR -ge 1 ]; then
            echo "protocol is bizur"
            if [ "$SERVER_NAME" = "node1" ]; then
              # always disconnect node-1
              disconnect
              exit 0
            fi
          fi
          
          echo "I am not the node to be disconnected"

        chdir: "{{ nodes_GROUP_working_dir }}"
      vars:
        _mandatory_params: "destinations={{ workers_GROUP_store_destinations }} transport.message.callbackTimeoutMs=60000"
        _server_name: "{{ group_names[0] }}"
        _home_dir: "{{ all_GROUP_home_dir }}"
        _condition: "{{ condition }}"
      async: "{{ duration_sec * 2 | default(500) }}"
      poll: 0
      register: inject_fault_task